<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>URL Shortener</title>
    <!-- Bootstrap -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.6/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.6/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Framer Motion -->
    <script src="https://unpkg.com/framer-motion@10.16.4/dist/framer-motion.js"></script>
    <!-- Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- Pop up messages library -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        :root {
            --primary: #4361ee;
            --primary-light: #4895ef;
            --secondary: #3f37c9;
            --dark: #1a1a2e;
            --light: #f8f9fa;
            --success: #4cc9f0;
            --error: #f72585;
            --bg-dark: #212121;
            --card-dark: #1e1e1e;
            --text-dark: #e0e0e0;
            --border-dark: #333;
            --input-dark: #2d2d2d;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Inter', sans-serif;
            background-color: var(--light);
            color: var(--dark);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            transition: background-color 0.3s ease, color 0.3s ease;
        }
        
        body.dark-mode {
            background-color: var(--bg-dark);
            color: var(--text-dark);
        }

        /* Navbar styles */
        .navbar {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem 2rem;
            background-color: var(--light);
            z-index: 1000;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }

        .dark-mode .navbar {
            background-color: var(--bg-dark);
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
        }

        .logo-container {
            display: flex;
            align-items: center;
        }

        .logo {
            height: 50px;
            cursor: pointer;
            transition: transform 0.3s ease;
        }

        .logo:hover {
            transform: scale(1.05);
        }

        .nav-center {
            position: absolute;
            left: 50%;
            transform: translateX(-50%);
        }

        .nav-right {
            display: flex;
            align-items: center;
            gap: 1.5rem;
        }

        
        .theme-toggle {
            padding: 16px 32px;
            background: none !important;
            border: 1px solid var(--light);
            box-shadow: 1px 1px 3px rgb(202, 202, 202);
            border-radius: 8px;
        }

        .dark-mode .theme-toggle {
            padding: 16px 32px;
            background: none !important;
            border: 1px solid var(--bg-dark);
            box-shadow: 1px 1px 3px var(--card-dark);
            border-radius: 8px;
        }

        .theme-toggle:hover {
            transform: translateY(-2.5%);
            box-shadow: 2px 2px 7px rgb(195, 195, 195);
            transition: transform 0.3s ease;
        }

        .dark-mode .theme-toggle:hover {
            transform: translateY(-2.5%);
            box-shadow: 2px 2px 7px var(--card-dark);
            transition: transform 0.3s ease;
        }

        .nav-link {
            color: var(--dark);
            text-decoration: none;
            font-weight: 500;
            transition: all 0.3s ease;
            cursor: pointer;
            position: relative;
        }

        .nav-link::after {
            content: '';
            position: absolute;
            bottom: -5px;
            left: 0;
            width: 0;
            height: 2px;
            background-color: var(--primary);
            transition: width 0.3s ease;
        }

        .nav-link:hover::after {
            width: 100%;
        }

        .dark-mode .nav-link {
            color: var(--text-dark);
        }

        .profile-container {
            position: relative;
        }

        .profile-img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: contain;
            cursor: pointer;
            transition: transform 0.3s ease;
        }

        .profile-img:hover {
            transform: scale(1.1);
        }

        .dropdown-menu {
            position: absolute;
            right: 0;
            top: 50px;
            background-color: var(--light);
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            padding: 0.5rem 0;
            width: 180px;
            display: none;
            z-index: 1001;
            transform-origin: top right;
        }

        .dark-mode .dropdown-menu {
            background-color: var(--card-dark);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        }

        .dropdown-menu.show {
            display: block;
        }

        .dropdown-item {
            padding: 0.75rem 1rem;
            color: var(--dark);
            text-decoration: none;
            display: block;
            transition: all 0.2s ease;
        }

        .dark-mode .dropdown-item {
            color: var(--text-dark);
        }

        .dropdown-item:hover {
            background-color: rgba(67, 97, 238, 0.1);
            padding-left: 1.2rem;
        }

        .dropdown-divider {
            height: 1px;
            background-color: #e9ecef;
            margin: 0.25rem 0;
        }

        .dark-mode .dropdown-divider {
            background-color: var(--border-dark);
        }

        /* Loading Screen */
        .loading-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: var(--light);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 9999;
            transition: opacity 0.5s ease;
        }

        .dark-mode .loading-screen {
            background-color: var(--bg-dark);
        }

        .loader {
            width: 48px;
            height: 48px;
            border: 5px solid var(--primary);
            border-bottom-color: transparent;
            border-radius: 50%;
            display: inline-block;
            box-sizing: border-box;
            animation: rotation 1s linear infinite;
        }

        @keyframes rotation {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .loading-text {
            margin-top: 20px;
            font-size: 1.2rem;
            color: var(--dark);
        }

        .dark-mode .loading-text {
            color: var(--text-dark);
        }

        /* Main Layout */
        .profile-layout {
            display: flex;
            margin-top: 80px;
            min-height: calc(100vh - 80px);
        }

        /* Sidebar */
        .profile-sidebar {
            width: 280px;
            background-color: var(--light);
            padding: 2rem 1.5rem;
            border-right: 1px solid rgba(0, 0, 0, 0.1);
            position: fixed;
            height: 100%;
            transition: all 0.3s ease;
        }

        .dark-mode .profile-sidebar {
            background-color: var(--card-dark);
            border-right: 1px solid var(--border-dark);
        }

        .sidebar-header {
            display: flex;
            align-items: center;
            margin-bottom: 2rem;
            padding-bottom: 1.5rem;
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
        }

        .dark-mode .sidebar-header {
            border-bottom: 1px solid var(--border-dark);
        }

        .sidebar-avatar {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            object-fit: cover;
            margin-right: 1rem;
        }

        .sidebar-user h3 {
            margin: 0;
            font-size: 1.2rem;
        }

        .sidebar-user p {
            margin: 0.25rem 0 0;
            font-size: 0.9rem;
            color: #666;
        }

        .dark-mode .sidebar-user p {
            color: #a0aec0;
        }

        .sidebar-menu {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .sidebar-item {
            cursor: pointer;
            margin-bottom: 0.5rem;
        }

        .sidebar-link {
            display: flex;
            align-items: center;
            padding: 0.75rem 1rem;
            color: var(--dark);
            text-decoration: none;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .dark-mode .sidebar-link {
            color: var(--text-dark);
        }

        .sidebar-link:hover, 
        .sidebar-link.active,
        .sidebar-link:focus {
            background-color: rgba(67, 97, 238, 0.1);
            color: var(--primary);
        }

        /* Special style for delete button */
        .sidebar-link[onclick="handleDelete()"]:hover {
            background-color: rgba(247, 37, 133, 0.1);
            color: var(--error) !important;
        }

        .sidebar-divider {
            height: 1px;
            background-color: rgba(0, 0, 0, 0.1);
            margin: 1rem 0;
        }

        .dark-mode .sidebar-divider {
            background-color: var(--border-dark);
        }

        .logout-btn-container, 
        .delete-btn-container{

            display: none;
        }

        .sidebar-link i {
            margin-right: 12px;
            width: 20px;
            text-align: center;
            font-size: 1.1rem;
        }

        /* Profile Content */
        .profile-main {
            flex: 1;
            padding: 3rem;
            margin-left: 280px;
        }

        /* Profile Header */
        .profile-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        .profile-title {
            font-size: 2rem;
            margin: 0;
            background: linear-gradient(45deg, var(--primary), var(--secondary));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .edit-profile {
            background-color: var(--primary);
            color: white;
            border: none;
            padding: 0.5rem 1.5rem;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .edit-profile:hover {
            background-color: var(--secondary);
            transform: translateY(-2px);
        }

        /* Stats Cards */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
            margin-bottom: 3rem;
        }

        .stat-card {
            background-color: var(--light);
            border-radius: 12px;
            padding: 1.5rem;
            text-align: center;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
            transition: transform 0.3s ease;
        }

        .dark-mode .stat-card {
            background-color: var(--card-dark);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        }

        .stat-card:hover {
            transform: translateY(-5px);
        }

        .stat-icon {
            font-size: 2rem;
            color: var(--primary);
            margin-bottom: 1rem;
        }

        .stat-number {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }

        .stat-label {
            font-size: 0.9rem;
            color: #666;
        }

        .dark-mode .stat-label {
            color: #a0aec0;
        }

        /* Plan Card */
        .plan-card {
            background-color: var(--light);
            border-radius: 12px;
            padding: 2rem;
            margin-bottom: 3rem;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
            position: relative;
            overflow: hidden;
            border: 1px solid rgba(67, 97, 238, 0.2);
        }

        .dark-mode .plan-card {
            background-color: var(--card-dark);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
            border-color: rgba(67, 97, 238, 0.3);
        }

        .plan-card.premium {
            border-left: 4px solid #f72585;
        }

        .plan-card.pro {
            border-left: 4px solid #4cc9f0;
        }

        .plan-card.free {
            border-left: 4px solid #4895ef;
        }

        .plan-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .plan-title {
            font-size: 1.5rem;
            margin: 0;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .plan-title i {
            font-size: 1.2rem;
        }

        .plan-badge {
            display: inline-block;
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 500;
            background-color: rgba(67, 97, 238, 0.1);
            color: var(--primary);
        }

        .plan-card.premium .plan-badge {
            background-color: rgba(247, 37, 133, 0.1);
            color: #f72585;
        }

        .plan-card.pro .plan-badge {
            background-color: rgba(76, 201, 240, 0.1);
            color: #4cc9f0;
        }

        .plan-card.free .plan-badge {
            background-color: rgba(72, 149, 239, 0.1);
            color: #4895ef;
        }

        .plan-features {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .feature-item {
            display: flex;
            align-items: flex-start;
            gap: 10px;
        }

        .feature-item i {
            color: var(--primary);
            margin-top: 3px;
        }

        .plan-card.premium .feature-item i {
            color: #f72585;
        }

        .plan-card.pro .feature-item i {
            color: #4cc9f0;
        }

        .plan-card.free .feature-item i {
            color: #4895ef;
        }

        .feature-text {
            flex: 1;
        }

        .plan-actions {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding-top: 1.5rem;
            border-top: 1px solid rgba(0, 0, 0, 0.1);
        }

        .dark-mode .plan-actions {
            border-top: 1px solid var(--border-dark);
        }

        .plan-expiry {
            font-size: 0.9rem;
            color: #666;
        }

        .dark-mode .plan-expiry {
            color: #a0aec0;
        }

        /* Details Card */
        .details-card {
            background-color: var(--light);
            border-radius: 12px;
            padding: 2rem;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
            margin-bottom: 2rem;
        }

        .dark-mode .details-card {
            background-color: var(--card-dark);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        }

        .details-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .details-title {
            font-size: 1.5rem;
            margin: 0;
            color: var(--primary);
        }

        .details-edit {
            background: none;
            border: none;
            color: var(--primary);
            font-weight: 500;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .details-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
        }

        .detail-item {
            margin-bottom: 1rem;
        }

        .detail-label {
            font-size: 0.85rem;
            color: #666;
            margin-bottom: 0.25rem;
        }

        .dark-mode .detail-label {
            color: #a0aec0;
        }

        .detail-value {
            font-size: 1rem;
            font-weight: 500;
        }


        /* Modal Styles */
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 2000;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.3s ease;
        }

        .modal.active {
            opacity: 1;
            pointer-events: auto;
        }

        .modal-content {
            background-color: var(--light);
            border-radius: 12px;
            width: 90%;
            max-width: 500px;
            padding: 2rem;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
            transform: translateY(-20px);
            transition: transform 0.3s ease;
            position: relative;
        }

        .modal-content h2{
            color: var(--bg-dark);
        }

        .modal.active .modal-content {
            transform: translateY(0);
        }

        .dark-mode .modal-content {
            background-color: var(--card-dark);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
        }

        .dark-mode .modal-content h2{
            color: var(--light);
            background-color: var(--card-dark);
        }

        /* Form Styles */
        .form-group {
            margin-bottom: 1.25rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: var(--dark);
        }

        .dark-mode .form-group label {
            color: var(--text-dark);
        }

        .form-group input {
            width: 100%;
            padding: 0.75rem 1rem;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 1rem;
            transition: all 0.3s ease;
            background-color: white;
        }

        .dark-mode .form-group input {
            background-color: var(--input-dark);
            border-color: var(--border-dark);
            color: var(--text-dark);
        }

        .form-group input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.2);
        }

        .dark-mode .form-group input:focus {
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.4);
        }

        .submit-btn {
            width: 100%;
            padding: 0.75rem;
            background-color: var(--primary);
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-top: 1rem;
        }

        .submit-btn:hover {
            background-color: var(--secondary);
            transform: translateY(-2px);
        }

        /* Password Strength Indicator */
        .password-strength {
            height: 4px;
            background-color: #eee;
            margin-top: 0.5rem;
            border-radius: 2px;
            overflow: hidden;
        }

        .dark-mode .password-strength {
            background-color: #333;
        }

        .strength-meter {
            height: 100%;
            width: 0;
            transition: width 0.3s ease, background-color 0.3s ease;
        }

        /* Responsive Adjustments */
        @media (max-width: 576px) {
            .modal-content {
            padding: 1.5rem;
            width: 95%;
            }
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .logout-btn-container, 
            .delete-btn-container {
                position: static;
                margin: 1rem;
            }
            
            .logout-btn-container {
                order: 1;
            }
            
            .delete-btn-container {
                order: 2;
            }
        }

        /* Responsive */
        @media (max-width: 992px) {
            .profile-layout {
                flex-direction: column;
            }
            
            .profile-sidebar {
                width: 100%;
                position: static;
                height: auto;
                padding: 1.5rem;
                border-right: none;
                border-bottom: 1px solid rgba(0, 0, 0, 0.1);
            }
            
            .profile-main {
                margin-left: 0;
                padding: 2rem;
            }
        }

        @media (max-width: 768px) {
            .profile-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }
            
            .stats-grid {
                grid-template-columns: 1fr 1fr;
            }
            
            .plan-features {
                grid-template-columns: 1fr;
            }
        }

        @media (max-width: 576px) {
            .stats-grid {
                grid-template-columns: 1fr;
            }
            
            .plan-actions {
                flex-direction: column;
                gap: 1rem;
                align-items: flex-start;
            }
        }

        /* Animations */
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @keyframes fadeInUp {
            from { 
                opacity: 0;
                transform: translateY(20px);
            }
            to { 
                opacity: 1;
                transform: translateY(0);
            }
        }
    </style>
</head>
<body>
    <% 
    const createdDate = new Date(userData.createdAt);
    const createdFormatted = createdDate.toLocaleDateString('en-US', { 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric' 
    });
    const now = new Date();
    const diffYears = now.getFullYear() - createdDate.getFullYear();
    const expiryDate = new Date(userData.planExpiry);
    const expiryFormatted = expiryDate.toLocaleDateString('en-US', { 
        day: 'numeric', 
        month: 'long', 
        year: 'numeric' 
    });
    %>
    <!-- Loading Screen -->
    <div class="loading-screen" id="loadingScreen">
        <div class="loader"></div>
        <div class="loading-text">Loading your profile...</div>
    </div>

    <!-- Navbar -->
    <nav class="navbar">
        <div class="logo-container">
            <a href="/">
                <img src="/images/logo.png" alt="Logo" class="logo">
            </a>
        </div>
        
        <div class="nav-center">
            <button class="theme-toggle" id="themeToggle">
                <i class="fas fa-moon"></i>
            </button>
        </div>
        
        <div class="nav-right">
            <a href="/#pricing" class="nav-link">Pricing</a>
            <a href="/#contact" class="nav-link">Contact</a>
            
            <div class="profile-container">
                <img src="/images/default-profile.jpg" alt="Profile" class="profile-img" id="profileImg">
                <div class="dropdown-menu" id="dropdownMenu">
                    <a href="/" class="dropdown-item">Home</a>
                    <a href="/profile/analytics" class="dropdown-item">Your Analytics</a>
                    <% if (userData.role === 'ADMIN') { %>
                        <a href="/admin-analytics" class="dropdown-item">Admin Dashboard</a>
                    <% } %>
                    <div class="dropdown-divider"></div>
                    <a href="/logout" class="dropdown-item">Logout</a>
                </div>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="profile-layout">
        <!-- Sidebar -->
        <aside class="profile-sidebar">
            <div class="sidebar-header">
                <img src="/images/default-profile.jpg" alt="User" class="sidebar-avatar">
                <div class="sidebar-user">
                    <h3><%= userData.name %></h3>
                    <% if (userData.role === 'ADMIN') { %>
                        <p>Admin</p>
                    <% }else{%>
                        <p><%= userData.plan %> Member</p>
                    <% } %>
                </div>
            </div>
            
            <ul class="sidebar-menu">
                <li class="sidebar-item">
                    <a href="/profile" class="sidebar-link active">
                        <i class="fas fa-user"></i>
                        Profile Overview
                    </a>
                </li>
                <li class="sidebar-item">
                    <a href="/profile/analytics" class="sidebar-link">
                        <i class="fas fa-chart-line"></i>
                        Link Analytics
                    </a>
                </li>
                <li class="sidebar-item">
                    <a href="/profile/billing" class="sidebar-link">
                        <i class="fas fa-credit-card"></i>
                        Billing
                    </a>
                </li>
                <% if (userData.role === 'ADMIN') { %>
                    <li class="sidebar-item">
                        <a href="/admin-analytics" class="sidebar-link">
                            <i class="fa-solid fa-user-tie"></i>
                            Admin Dashboard
                        </a>
                    </li>
                <% } %>

                <div class="sidebar-divider"></div>
    
                <li class="sidebar-item">
                    <a class="sidebar-link" onclick="handleLogout()">
                        <i class="fas fa-sign-out-alt"></i>
                        Logout
                    </a>
                </li>
                
                <li class="sidebar-item">
                    <a class="sidebar-link" onclick="handleDelete()" style="color: var(--error);">
                        <i class="fas fa-trash-alt"></i>
                        Delete Account
                    </a>
                </li>
            </ul>
        </aside>

        <!-- Main Content -->
        <main class="profile-main">
            <div class="profile-header">
                <h1 class="profile-title">Profile Overview</h1>
            </div>
            
            <!-- Stats Grid -->
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-icon">
                        <i class="fas fa-link"></i>
                    </div>
                    <% if (userLinksCount <= 10) { %>
                        <div class="stat-number"><%= userLinksCount %></div>
                    <% }else{ %>
                        <div class="stat-label">10+</div>
                    <% } %>
                    <div class="stat-label">Total Links Created By You</div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon">
                        <i class="fas fa-calendar-alt"></i>
                    </div>
                    <div class="stat-number">
                        <%= diffYears %>y
                    </div>
                    <div class="stat-label">Member Since</div>
                </div>
            </div>
            
            <!-- Plan Card -->
            <div class="plan-card <%= userData.plan.toLowerCase() %>">
                <div class="plan-header">
                    <% if (userData.role === 'ADMIN') { %>
                        <h2 class="plan-title">
                            <i class="fas fa-crown"></i>
                            <%= userData.role %> 
                        </h2>
                    <% }else{ %>
                        <h2 class="plan-title">
                            <i class="fas fa-crown"></i>
                            <%= userData.plan %> plan 
                        </h2>
                    <% } %>
                    <span class="plan-badge">
                        <% if (userData.planActivated) { %>
                            Active
                        <% } else { %>
                            Inactive
                        <% } %>
                    </span>
                </div>
                
                <div class="plan-features">
                    <div class="feature-item">
                        <i class="fas fa-check-circle"></i>
                        <div class="feature-text">
                            <strong><%= plan[userData.plan.toLowerCase()].linkCreation %></strong>
                        </div>
                    </div>
                    <div class="feature-item">
                        <i class="fas fa-check-circle"></i>
                        <div class="feature-text">
                            <strong><%= plan[userData.plan.toLowerCase()].analytics %></strong>
                        </div>
                    </div>
                    <div class="feature-item">
                        <i class="fas fa-check-circle"></i>
                        <div class="feature-text">
                            <strong><%= plan[userData.plan.toLowerCase()].customDomains %></strong>
                        </div>
                    </div>
                    <div class="feature-item">
                        <i class="fas fa-check-circle"></i>
                        <div class="feature-text">
                            <strong><%= plan[userData.plan.toLowerCase()].support %></strong>
                        </div>
                    </div>
                </div>
                
                <% if (userData.role === 'ADMIN') { %>
                    <!-- Nothing --> 
                <% }else{ %>
                    <div class="plan-actions">
                        <p class="plan-expiry">Expires on: <%= expiryFormatted %></p>
                    </div>
                <% } %>
            </div>
            
            <!-- Personal Details Card -->
            <div class="details-card">
                <div class="details-header">
                    <h2 class="details-title">
                        <i class="fas fa-user-circle"></i>
                        Personal Details
                    </h2>
                    <button class="details-edit" onclick="handlePersonalDetailsEdit()">
                        <i class="fas fa-edit"></i>
                        Edit
                    </button>
                </div>
                
                <div class="details-grid">
                    <div class="detail-item">
                        <div class="detail-label">Full Name</div>
                        <div class="detail-value"><%= userData.name %></div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">Email Address</div>
                        <div class="detail-value"><%= userData.email %></div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">Phone Number</div>
                        <div class="detail-value"><%= userData.phone %></div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">Account Created</div>
                        <div class="detail-value">
                            <%= createdFormatted %>
                        </div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">Location</div>
                        <div class="detail-value">
                            <%= userData.address.city %>, <%= userData.address.country %>
                        </div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">Timezone</div>
                        <div class="detail-value">Not available</div>
                    </div>
                </div>
            </div>
            
            <!-- Security Card -->
            <div class="details-card">
                <div class="details-header">
                    <h2 class="details-title">
                        <i class="fas fa-shield-alt"></i>
                        Security
                    </h2>
                    <button class="details-edit" onclick="handleSecurityDetailsEdit()">
                        <i class="fas fa-edit"></i>
                        Edit
                    </button>
                </div>
                
                <div class="details-grid">
                    <div class="detail-item">
                        <div class="detail-label">Password</div>
                        <div class="detail-value">••••••••••</div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">Two-Factor Auth</div>
                        <div class="detail-value">Feature Not Available</span></div>
                    </div>
                    <div class="detail-item">
                        <div class="detail-label">Last Login</div>
                        <div class="detail-value">Not Tracked</div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <%- include('./components/footer.ejs') %>

    <script>
        //Function to handle edits (personal)
        function handlePersonalDetailsEdit() {
            const modalHTML = `
                <div class="modal" id="editPersonalModal">
                    <div class="modal-content">
                        <h2>Edit Personal Details</h2>
                        <form id="editPersonalForm">
                            <div class="form-group">
                                <label for="name">Full Name</label>
                                <input type="text" id="name" name="name" value="<%= userData.name %>" required>
                            </div>
                            <div class="form-group">
                                <label for="email">Email Address</label>
                                <input type="email" id="email" name="email" value="<%= userData.email %>" required>
                            </div>
                            <div class="form-group">
                                <label for="phone">Phone Number</label>
                                <input type="tel" id="phone" name="phone" value="<%= userData.phone %>">
                            </div>
                            <div class="form-group">
                                <label for="city">City</label>
                                <input type="text" id="city" name="city" value="<%= userData.address.city %>">
                            </div>
                            <div class="form-group">
                                <label for="country">Country</label>
                                <input type="text" id="country" name="country" value="<%= userData.address.country %>">
                            </div>
                            <button type="submit" class="submit-btn">Save Changes</button>
                        </form>
                    </div>
                </div>
            `;
            
            //Append the modal to the body
            document.body.insertAdjacentHTML('beforeend', modalHTML);
            
            //Show the modal
            setTimeout(() => {
                document.getElementById('editPersonalModal').classList.add('active');
            }, 10);
            
            //form submission handler
            document.getElementById('editPersonalForm').addEventListener('submit', handleEditPersonalSubmit);
        }

        // Function to handle form submission
        async function handleEditPersonalSubmit(event) {
            event.preventDefault();

            const form = event.target;
            const updateData = {};
            
            // Check each field for changes using dot notation
            if (form.name.value !== "<%= userData.name %>") updateData.name = form.name.value;
            if (form.email.value !== "<%= userData.email %>") updateData.email = form.email.value;
            if (form.phone.value !== "<%= userData.phone %>") updateData.phone = form.phone.value;
            if (form.city.value !== "<%= userData.address.city %>") updateData["address.city"] = form.city.value;
            if (form.country.value !== "<%= userData.address.country %>") updateData["address.country"] = form.country.value;

            // Skip request if nothing changed
            if (Object.keys(updateData).length === 0) {
                await Swal.fire('No changes detected');
                closeModal('editPersonalModal');
                return;
            }
            
            try{
                const response = await fetch('/profile/edit-personal', {
                method: 'PATCH',
                body: JSON.stringify(updateData),
                headers: {
                    'Content-Type': 'application/json',
                }
                });
                
                console.log("RESPONSE:", response);

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                closeModal('editPersonalModal');

                await Swal.fire({
                title: 'Success!',
                text: 'Successfully edited!',
                icon: 'success',
                confirmButtonText: 'OK'
                });

                window.location.reload();
                
            } catch (error) {
                console.error('Error:', error);
                
                await Swal.fire({
                title: 'Error!',
                text: error.message || 'Failed to edit details',
                icon: 'error',
                confirmButtonText: 'OK'
                });
            }
        }

        //Handle Security Details
        async function handleSecurityDetailsEdit() {
            //show password verification modal
            const verifyHTML = `
                <div class="modal" id="verifyPasswordModal">
                    <div class="modal-content">
                        <h2>Verify Password</h2>
                        <form id="verifyPasswordForm">
                            <div class="form-group">
                                <label for="currentPassword">Enter Current Password</label>
                                <input type="password" id="currentPassword" name="currentPassword" required>
                            </div>
                            <button type="submit" class="submit-btn">Verify</button>
                        </form>
                    </div>
                </div>
            `;
            
            document.body.insertAdjacentHTML('beforeend', verifyHTML);

            setTimeout(() => {
                document.getElementById('verifyPasswordModal').classList.add('active');
            }, 10);
            
            document.getElementById('verifyPasswordForm').addEventListener('submit', async (e) => {
                e.preventDefault();
                const password = document.getElementById('currentPassword').value;
                try {
                    const response = await fetch('/profile/verify-password', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ password })
                    });

                    if (!response.ok) throw new Error('Verification failed');
                    
                    const { valid } = await response.json();
                    
                    if (valid) {
                        closeModal('verifyPasswordModal');
                        showPasswordEditModal(); // Show actual edit modal after verification
                    } else {
                        closeModal('verifyPasswordModal');
                        throw new Error('Incorrect password');
                    }
                } catch (error) {
                    await Swal.fire({
                        title: 'Error!',
                        text: error.message || 'Password verification failed',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                }
            });
        }

        function showPasswordEditModal() {
            const modalHTML = `
                <div class="modal" id="editSecurityModal">
                    <div class="modal-content">
                        <span class="close-modal" onclick="closeModal('editSecurityModal')">&times;</span>
                        <h2>Change Password</h2>
                        <form id="editSecurityForm">
                            <div class="form-group">
                                <label for="newPassword">New Password</label>
                                <input type="password" id="newPassword" name="newPassword" required>
                            </div>
                            <div class="form-group">
                                <label for="confirmPassword">Confirm New Password</label>
                                <input type="password" id="confirmPassword" name="confirmPassword" required>
                            </div>
                            <button type="submit" class="submit-btn">Update Password</button>
                        </form>
                    </div>
                </div>
            `;
            
            document.body.insertAdjacentHTML('beforeend', modalHTML);
            document.getElementById('editSecurityModal').style.display = 'block';
            
            document.getElementById('editSecurityForm').addEventListener('submit', handleEditSecuritySubmit);
        }

        async function handleEditSecuritySubmit(event) {
            event.preventDefault();
            
            const newPassword = document.getElementById('newPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            
            if (newPassword !== confirmPassword) {
                await Swal.fire({
                    title: 'Error!',
                    text: 'Passwords do not match',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
                return;
            }
            
            try {
                const response = await fetch('/profile/edit-security', {
                    method: 'PATCH',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ newPassword })
                });
                
                if (!response.ok) throw new Error('Password update failed');
                
                closeModal('editSecurityModal');
                await Swal.fire({
                    title: 'Success!',
                    text: 'Password updated successfully!',
                    icon: 'success',
                    confirmButtonText: 'OK'
                });
                
                window.location.reload();
            } catch (error) {
                await Swal.fire({
                    title: 'Error!',
                    text: error.message || 'Failed to update password',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        }

        function closeModal(modalId) {
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.classList.remove('active');
                setTimeout(() => {
                    modal.remove();
                }, 300); 
            }
        }

        //Close modal when clicking outside of it
        window.addEventListener('click', function(event) {
            if(event.target.classList.contains('modal')){
                closeModal(event.target.id);
            }
        });

        //Handle Logout functionality
        function handleLogout(){
            //Redirect to /logout
            window.location.href = '/logout';
        }

        async function handleDelete() {
            // First confirmation
            const { isConfirmed } = await Swal.fire({
                title: 'Delete Account?',
                text: 'Are you sure you want to delete your account? This cannot be undone!! Also No refund will be provided if you are registered in a program!',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Continue',
                cancelButtonText: 'Cancel'
            });

            if (!isConfirmed) return;

            // Password prompt
            const { value: password } = await Swal.fire({
                title: 'Confirm Password',
                input: 'password',
                inputLabel: 'Enter your password to confirm deletion:',
                inputPlaceholder: 'Your password',
                showCancelButton: true,
                inputValidator: (value) => {
                    if (!value) {
                        return 'Password is required!';
                    }
                }
            });

            if(!password){
                //User mustve clicked cancel!
                return;
            }

            //Send password to server for verification & deletion
            try {
                const response = await fetch('/delete-account', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ password: password })
                });

                const result = await response.json();

                if (response.success) {
                    //Successfully deleted
                    await Swal.fire({
                        title: 'Account Deleted!',
                        text: 'Your account has been successfully deleted.',
                        icon: 'success',
                        confirmButtonText: 'OK'
                    });
                    window.location.href = '/signup';
                }else{
                    throw new Error(result.message || 'Failed to delete account');
                }
            }catch(err){
                Swal.fire({
                    title: 'Error',
                    text: err.message,
                    icon: 'error'
                });
            }
        }

        // Simulate loading data from backend
        document.addEventListener('DOMContentLoaded', function() {
            // Hide loading screen after 1.5 seconds (simulating API call)
            setTimeout(() => {
                document.getElementById('loadingScreen').style.opacity = '0';
                setTimeout(() => {
                    document.getElementById('loadingScreen').style.display = 'none';
                }, 500);
            }, 1500);
            
            // Profile dropdown toggle
            const profileImg = document.getElementById('profileImg');
            const dropdownMenu = document.getElementById('dropdownMenu');
            
            profileImg.addEventListener('click', function(e) {
                e.stopPropagation();
                dropdownMenu.classList.toggle('show');
            });
            
            // Close dropdown when clicking outside
            document.addEventListener('click', function() {
                if (dropdownMenu.classList.contains('show')) {
                    dropdownMenu.classList.remove('show');
                }
            });
            
            // Dark mode toggle
            const themeToggle = document.getElementById('themeToggle');
            themeToggle.addEventListener('click', function() {
                document.body.classList.toggle('dark-mode');
                const isDark = document.body.classList.contains('dark-mode');
                localStorage.setItem('darkMode', isDark);
                
                // Update icon
                const icon = this.querySelector('i');
                if (isDark) {
                    icon.classList.replace('fa-moon', 'fa-sun');
                    icon.style.color = 'white';
                } else {
                    icon.classList.replace('fa-sun', 'fa-moon');
                    icon.style.color = 'black';
                }
            });
            
            // Check for saved theme preference
            if (localStorage.getItem('darkMode') === 'true') {
                document.body.classList.add('dark-mode');
                const icon = document.querySelector('#themeToggle i');
                icon.classList.replace('fa-moon', 'fa-sun');
                icon.style.color = 'white';
            }
            
            // Animation for cards
            const animateCards = () => {
                const cards = document.querySelectorAll('.stat-card, .plan-card, .details-card');
                
                cards.forEach((card, index) => {
                    setTimeout(() => {
                        card.style.animation = `fadeInUp 0.5s ease-out ${index * 0.1}s forwards`;
                        card.style.opacity = '0';
                    }, 0);
                });
            };
            
            // Run animations after loading
            setTimeout(animateCards, 1500);
        });
    </script>
</body>
</html>